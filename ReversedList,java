class ReversedList {
    public ListNode reverseList(ListNode head) {
        ListNode current = head;
        ListNode previous = null;
    
        while (current != null) {
            ListNode next = current.next;
            current.next = previous;
            previous = current;
            current = next;
        }

        return previous;
    }
}

/*  
Start with the head of the linked list - the first node
 -Loop until end of the list (current is null)
  -Keep track of the next node in original list - nextCurrent -> current.next
  -Change 'next' pointer of current node to point to previous node - current.next -> previous
  -Update 'previous' to be current node - previous = current
  -Move 'current' to next node - current -> nextCurrent
  -End loop and return new head which will be previous node
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */